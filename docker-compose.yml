version: '3'

services:
  neo4j:
    image: neo4j:5.8.0
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/testpassword
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_security_procedures_unrestricted=db.index.vector.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "testpassword", "RETURN 1;"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    ports:
      - '6333:6333' # Qdrant REST API port
    volumes:
      - qdrant_storage:/qdrant/storage

  # graphrag:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: graphrag-app
  #   depends_on:
  #     neo4j:
  #       condition: service_healthy
  #   environment:
  #     - NEO4J_URI=bolt://neo4j:7687
  #     - NEO4J_USER=neo4j
  #     - NEO4J_PASSWORD=testpassword
  #   volumes:
  #     - ./data:/app/data
  #   ports:
  #     - "8000:8000"  # Reserved for potential future web interface
  #   command: >
  #     bash -c "
  #       graphrag setup &&
  #       graphrag process /app/huggingface.txt &&
  #       graphrag interactive
  #     "
  #   stdin_open: true  # Docker equivalent of -i (interactive)
  #   tty: true         # Docker equivalent of -t (tty)

volumes:
  neo4j_data:
  neo4j_logs:
  qdrant_storage:
# To use:
# 1. Create a 'data' directory in your project root
# 2. Run with: docker-compose up -d
# 3. Connect to the interactive session: docker attach graphrag-app
# 4. Exit interactive session with Ctrl+D (without stopping container) 